'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2494
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Runtime.Serialization
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2494.
'
Namespace InformacoesHistoricas
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="InformacoesHistoricasSoap", [Namespace]:="http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas")>  _
    Public Class InformacoesHistoricas
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Dim urlSetting As String = System.Configuration.ConfigurationSettings.AppSettings("VAK020.InformacoesHistoricas.InformacoesHistoricas")
            If (Not (urlSetting) Is Nothing) Then
                Me.Url = String.Concat(urlSetting, "")
            Else
                Me.Url = "http://localhost/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHisto"& _ 
"ricas.asmx"
            End If
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas/SaldoResidualRepresentanteObter", RequestNamespace:="http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas", ResponseNamespace:="http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaldoResidualRepresentanteObter(ByVal CodigoRepresentante As Integer) As DatasetValoresIndenizatorios
            Dim results() As Object = Me.Invoke("SaldoResidualRepresentanteObter", New Object() {CodigoRepresentante})
            Return CType(results(0),DatasetValoresIndenizatorios)
        End Function
        
        '<remarks/>
        Public Function BeginSaldoResidualRepresentanteObter(ByVal CodigoRepresentante As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SaldoResidualRepresentanteObter", New Object() {CodigoRepresentante}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndSaldoResidualRepresentanteObter(ByVal asyncResult As System.IAsyncResult) As DatasetValoresIndenizatorios
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DatasetValoresIndenizatorios)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas/ValoresIndenizatoriosObter", RequestNamespace:="http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas", ResponseNamespace:="http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValoresIndenizatoriosObter(ByVal CodigoRepresentante As Integer) As DatasetValoresIndenizatorios
            Dim results() As Object = Me.Invoke("ValoresIndenizatoriosObter", New Object() {CodigoRepresentante})
            Return CType(results(0),DatasetValoresIndenizatorios)
        End Function
        
        '<remarks/>
        Public Function BeginValoresIndenizatoriosObter(ByVal CodigoRepresentante As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ValoresIndenizatoriosObter", New Object() {CodigoRepresentante}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndValoresIndenizatoriosObter(ByVal asyncResult As System.IAsyncResult) As DatasetValoresIndenizatorios
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DatasetValoresIndenizatorios)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas/MaiorMesValidoComIndiceDeCorrecaoCadastradoObter", RequestNamespace:="http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas", ResponseNamespace:="http://tempuri.org/Martins.Web.Services.DelegacaoResponsabilidades/InformacoesHis"& _ 
"toricas", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MaiorMesValidoComIndiceDeCorrecaoCadastradoObter() As DatasetValoresIndenizatorios
            Dim results() As Object = Me.Invoke("MaiorMesValidoComIndiceDeCorrecaoCadastradoObter", New Object(-1) {})
            Return CType(results(0),DatasetValoresIndenizatorios)
        End Function
        
        '<remarks/>
        Public Function BeginMaiorMesValidoComIndiceDeCorrecaoCadastradoObter(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MaiorMesValidoComIndiceDeCorrecaoCadastradoObter", New Object(-1) {}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndMaiorMesValidoComIndiceDeCorrecaoCadastradoObter(ByVal asyncResult As System.IAsyncResult) As DatasetValoresIndenizatorios
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DatasetValoresIndenizatorios)
        End Function
    End Class
    
    <Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.ComponentModel.ToolboxItem(true)>  _
    Public Class DatasetValoresIndenizatorios
        Inherits DataSet
        
        Private tabletabelaValoresIndenizatorios As tabelaValoresIndenizatoriosDataTable
        
        Private tabletabelaSaldoResidual As tabelaSaldoResidualDataTable
        
        Private tabletabelaIndicesCadastrados As tabelaIndicesCadastradosDataTable
        
        Public Sub New()
            MyBase.New
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("tabelaValoresIndenizatorios")) Is Nothing) Then
                    Me.Tables.Add(New tabelaValoresIndenizatoriosDataTable(ds.Tables("tabelaValoresIndenizatorios")))
                End If
                If (Not (ds.Tables("tabelaSaldoResidual")) Is Nothing) Then
                    Me.Tables.Add(New tabelaSaldoResidualDataTable(ds.Tables("tabelaSaldoResidual")))
                End If
                If (Not (ds.Tables("tabelaIndicesCadastrados")) Is Nothing) Then
                    Me.Tables.Add(New tabelaIndicesCadastradosDataTable(ds.Tables("tabelaIndicesCadastrados")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.InitClass
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property tabelaValoresIndenizatorios As tabelaValoresIndenizatoriosDataTable
            Get
                Return Me.tabletabelaValoresIndenizatorios
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property tabelaSaldoResidual As tabelaSaldoResidualDataTable
            Get
                Return Me.tabletabelaSaldoResidual
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property tabelaIndicesCadastrados As tabelaIndicesCadastradosDataTable
            Get
                Return Me.tabletabelaIndicesCadastrados
            End Get
        End Property
        
        Public Overrides Function Clone() As DataSet
            Dim cln As DatasetValoresIndenizatorios = CType(MyBase.Clone,DatasetValoresIndenizatorios)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tabelaValoresIndenizatorios")) Is Nothing) Then
                Me.Tables.Add(New tabelaValoresIndenizatoriosDataTable(ds.Tables("tabelaValoresIndenizatorios")))
            End If
            If (Not (ds.Tables("tabelaSaldoResidual")) Is Nothing) Then
                Me.Tables.Add(New tabelaSaldoResidualDataTable(ds.Tables("tabelaSaldoResidual")))
            End If
            If (Not (ds.Tables("tabelaIndicesCadastrados")) Is Nothing) Then
                Me.Tables.Add(New tabelaIndicesCadastradosDataTable(ds.Tables("tabelaIndicesCadastrados")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        End Sub
        
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function
        
        Friend Sub InitVars()
            Me.tabletabelaValoresIndenizatorios = CType(Me.Tables("tabelaValoresIndenizatorios"),tabelaValoresIndenizatoriosDataTable)
            If (Not (Me.tabletabelaValoresIndenizatorios) Is Nothing) Then
                Me.tabletabelaValoresIndenizatorios.InitVars
            End If
            Me.tabletabelaSaldoResidual = CType(Me.Tables("tabelaSaldoResidual"),tabelaSaldoResidualDataTable)
            If (Not (Me.tabletabelaSaldoResidual) Is Nothing) Then
                Me.tabletabelaSaldoResidual.InitVars
            End If
            Me.tabletabelaIndicesCadastrados = CType(Me.Tables("tabelaIndicesCadastrados"),tabelaIndicesCadastradosDataTable)
            If (Not (Me.tabletabelaIndicesCadastrados) Is Nothing) Then
                Me.tabletabelaIndicesCadastrados.InitVars
            End If
        End Sub
        
        Private Sub InitClass()
            Me.DataSetName = "DatasetValoresIndenizatorios"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/DatasetValoresIndenizatorios.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = false
            Me.EnforceConstraints = true
            Me.tabletabelaValoresIndenizatorios = New tabelaValoresIndenizatoriosDataTable
            Me.Tables.Add(Me.tabletabelaValoresIndenizatorios)
            Me.tabletabelaSaldoResidual = New tabelaSaldoResidualDataTable
            Me.Tables.Add(Me.tabletabelaSaldoResidual)
            Me.tabletabelaIndicesCadastrados = New tabelaIndicesCadastradosDataTable
            Me.Tables.Add(Me.tabletabelaIndicesCadastrados)
        End Sub
        
        Private Function ShouldSerializetabelaValoresIndenizatorios() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializetabelaSaldoResidual() As Boolean
            Return false
        End Function
        
        Private Function ShouldSerializetabelaIndicesCadastrados() As Boolean
            Return false
        End Function
        
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        Public Delegate Sub tabelaValoresIndenizatoriosRowChangeEventHandler(ByVal sender As Object, ByVal e As tabelaValoresIndenizatoriosRowChangeEvent)
        
        Public Delegate Sub tabelaSaldoResidualRowChangeEventHandler(ByVal sender As Object, ByVal e As tabelaSaldoResidualRowChangeEvent)
        
        Public Delegate Sub tabelaIndicesCadastradosRowChangeEventHandler(ByVal sender As Object, ByVal e As tabelaIndicesCadastradosRowChangeEvent)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaValoresIndenizatoriosDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnUMDOZEAVOS As DataColumn
            
            Private columnUMTERCO As DataColumn
            
            Friend Sub New()
                MyBase.New("tabelaValoresIndenizatorios")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property UMDOZEAVOSColumn As DataColumn
                Get
                    Return Me.columnUMDOZEAVOS
                End Get
            End Property
            
            Friend ReadOnly Property UMTERCOColumn As DataColumn
                Get
                    Return Me.columnUMTERCO
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As tabelaValoresIndenizatoriosRow
                Get
                    Return CType(Me.Rows(index),tabelaValoresIndenizatoriosRow)
                End Get
            End Property
            
            Public Event tabelaValoresIndenizatoriosRowChanged As tabelaValoresIndenizatoriosRowChangeEventHandler
            
            Public Event tabelaValoresIndenizatoriosRowChanging As tabelaValoresIndenizatoriosRowChangeEventHandler
            
            Public Event tabelaValoresIndenizatoriosRowDeleted As tabelaValoresIndenizatoriosRowChangeEventHandler
            
            Public Event tabelaValoresIndenizatoriosRowDeleting As tabelaValoresIndenizatoriosRowChangeEventHandler
            
            Public Overloads Sub AddtabelaValoresIndenizatoriosRow(ByVal row As tabelaValoresIndenizatoriosRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddtabelaValoresIndenizatoriosRow(ByVal UMDOZEAVOS As Decimal, ByVal UMTERCO As Decimal) As tabelaValoresIndenizatoriosRow
                Dim rowtabelaValoresIndenizatoriosRow As tabelaValoresIndenizatoriosRow = CType(Me.NewRow,tabelaValoresIndenizatoriosRow)
                rowtabelaValoresIndenizatoriosRow.ItemArray = New Object() {UMDOZEAVOS, UMTERCO}
                Me.Rows.Add(rowtabelaValoresIndenizatoriosRow)
                Return rowtabelaValoresIndenizatoriosRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As tabelaValoresIndenizatoriosDataTable = CType(MyBase.Clone,tabelaValoresIndenizatoriosDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New tabelaValoresIndenizatoriosDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnUMDOZEAVOS = Me.Columns("UMDOZEAVOS")
                Me.columnUMTERCO = Me.Columns("UMTERCO")
            End Sub
            
            Private Sub InitClass()
                Me.columnUMDOZEAVOS = New DataColumn("UMDOZEAVOS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUMDOZEAVOS)
                Me.columnUMTERCO = New DataColumn("UMTERCO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnUMTERCO)
            End Sub
            
            Public Function NewtabelaValoresIndenizatoriosRow() As tabelaValoresIndenizatoriosRow
                Return CType(Me.NewRow,tabelaValoresIndenizatoriosRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New tabelaValoresIndenizatoriosRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(tabelaValoresIndenizatoriosRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.tabelaValoresIndenizatoriosRowChangedEvent) Is Nothing) Then
                    RaiseEvent tabelaValoresIndenizatoriosRowChanged(Me, New tabelaValoresIndenizatoriosRowChangeEvent(CType(e.Row,tabelaValoresIndenizatoriosRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.tabelaValoresIndenizatoriosRowChangingEvent) Is Nothing) Then
                    RaiseEvent tabelaValoresIndenizatoriosRowChanging(Me, New tabelaValoresIndenizatoriosRowChangeEvent(CType(e.Row,tabelaValoresIndenizatoriosRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.tabelaValoresIndenizatoriosRowDeletedEvent) Is Nothing) Then
                    RaiseEvent tabelaValoresIndenizatoriosRowDeleted(Me, New tabelaValoresIndenizatoriosRowChangeEvent(CType(e.Row,tabelaValoresIndenizatoriosRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.tabelaValoresIndenizatoriosRowDeletingEvent) Is Nothing) Then
                    RaiseEvent tabelaValoresIndenizatoriosRowDeleting(Me, New tabelaValoresIndenizatoriosRowChangeEvent(CType(e.Row,tabelaValoresIndenizatoriosRow), e.Action))
                End If
            End Sub
            
            Public Sub RemovetabelaValoresIndenizatoriosRow(ByVal row As tabelaValoresIndenizatoriosRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaValoresIndenizatoriosRow
            Inherits DataRow
            
            Private tabletabelaValoresIndenizatorios As tabelaValoresIndenizatoriosDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tabletabelaValoresIndenizatorios = CType(Me.Table,tabelaValoresIndenizatoriosDataTable)
            End Sub
            
            Public Property UMDOZEAVOS As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tabletabelaValoresIndenizatorios.UMDOZEAVOSColumn),Decimal)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletabelaValoresIndenizatorios.UMDOZEAVOSColumn) = value
                End Set
            End Property
            
            Public Property UMTERCO As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tabletabelaValoresIndenizatorios.UMTERCOColumn),Decimal)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletabelaValoresIndenizatorios.UMTERCOColumn) = value
                End Set
            End Property
            
            Public Function IsUMDOZEAVOSNull() As Boolean
                Return Me.IsNull(Me.tabletabelaValoresIndenizatorios.UMDOZEAVOSColumn)
            End Function
            
            Public Sub SetUMDOZEAVOSNull()
                Me(Me.tabletabelaValoresIndenizatorios.UMDOZEAVOSColumn) = System.Convert.DBNull
            End Sub
            
            Public Function IsUMTERCONull() As Boolean
                Return Me.IsNull(Me.tabletabelaValoresIndenizatorios.UMTERCOColumn)
            End Function
            
            Public Sub SetUMTERCONull()
                Me(Me.tabletabelaValoresIndenizatorios.UMTERCOColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaValoresIndenizatoriosRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As tabelaValoresIndenizatoriosRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As tabelaValoresIndenizatoriosRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As tabelaValoresIndenizatoriosRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaSaldoResidualDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnVLRSLDRSD As DataColumn
            
            Friend Sub New()
                MyBase.New("tabelaSaldoResidual")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property VLRSLDRSDColumn As DataColumn
                Get
                    Return Me.columnVLRSLDRSD
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As tabelaSaldoResidualRow
                Get
                    Return CType(Me.Rows(index),tabelaSaldoResidualRow)
                End Get
            End Property
            
            Public Event tabelaSaldoResidualRowChanged As tabelaSaldoResidualRowChangeEventHandler
            
            Public Event tabelaSaldoResidualRowChanging As tabelaSaldoResidualRowChangeEventHandler
            
            Public Event tabelaSaldoResidualRowDeleted As tabelaSaldoResidualRowChangeEventHandler
            
            Public Event tabelaSaldoResidualRowDeleting As tabelaSaldoResidualRowChangeEventHandler
            
            Public Overloads Sub AddtabelaSaldoResidualRow(ByVal row As tabelaSaldoResidualRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddtabelaSaldoResidualRow(ByVal VLRSLDRSD As Decimal) As tabelaSaldoResidualRow
                Dim rowtabelaSaldoResidualRow As tabelaSaldoResidualRow = CType(Me.NewRow,tabelaSaldoResidualRow)
                rowtabelaSaldoResidualRow.ItemArray = New Object() {VLRSLDRSD}
                Me.Rows.Add(rowtabelaSaldoResidualRow)
                Return rowtabelaSaldoResidualRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As tabelaSaldoResidualDataTable = CType(MyBase.Clone,tabelaSaldoResidualDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New tabelaSaldoResidualDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnVLRSLDRSD = Me.Columns("VLRSLDRSD")
            End Sub
            
            Private Sub InitClass()
                Me.columnVLRSLDRSD = New DataColumn("VLRSLDRSD", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnVLRSLDRSD)
            End Sub
            
            Public Function NewtabelaSaldoResidualRow() As tabelaSaldoResidualRow
                Return CType(Me.NewRow,tabelaSaldoResidualRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New tabelaSaldoResidualRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(tabelaSaldoResidualRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.tabelaSaldoResidualRowChangedEvent) Is Nothing) Then
                    RaiseEvent tabelaSaldoResidualRowChanged(Me, New tabelaSaldoResidualRowChangeEvent(CType(e.Row,tabelaSaldoResidualRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.tabelaSaldoResidualRowChangingEvent) Is Nothing) Then
                    RaiseEvent tabelaSaldoResidualRowChanging(Me, New tabelaSaldoResidualRowChangeEvent(CType(e.Row,tabelaSaldoResidualRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.tabelaSaldoResidualRowDeletedEvent) Is Nothing) Then
                    RaiseEvent tabelaSaldoResidualRowDeleted(Me, New tabelaSaldoResidualRowChangeEvent(CType(e.Row,tabelaSaldoResidualRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.tabelaSaldoResidualRowDeletingEvent) Is Nothing) Then
                    RaiseEvent tabelaSaldoResidualRowDeleting(Me, New tabelaSaldoResidualRowChangeEvent(CType(e.Row,tabelaSaldoResidualRow), e.Action))
                End If
            End Sub
            
            Public Sub RemovetabelaSaldoResidualRow(ByVal row As tabelaSaldoResidualRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaSaldoResidualRow
            Inherits DataRow
            
            Private tabletabelaSaldoResidual As tabelaSaldoResidualDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tabletabelaSaldoResidual = CType(Me.Table,tabelaSaldoResidualDataTable)
            End Sub
            
            Public Property VLRSLDRSD As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tabletabelaSaldoResidual.VLRSLDRSDColumn),Decimal)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletabelaSaldoResidual.VLRSLDRSDColumn) = value
                End Set
            End Property
            
            Public Function IsVLRSLDRSDNull() As Boolean
                Return Me.IsNull(Me.tabletabelaSaldoResidual.VLRSLDRSDColumn)
            End Function
            
            Public Sub SetVLRSLDRSDNull()
                Me(Me.tabletabelaSaldoResidual.VLRSLDRSDColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaSaldoResidualRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As tabelaSaldoResidualRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As tabelaSaldoResidualRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As tabelaSaldoResidualRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaIndicesCadastradosDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable
            
            Private columnMESREF As DataColumn
            
            Friend Sub New()
                MyBase.New("tabelaIndicesCadastrados")
                Me.InitClass
            End Sub
            
            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub
            
            <System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            Friend ReadOnly Property MESREFColumn As DataColumn
                Get
                    Return Me.columnMESREF
                End Get
            End Property
            
            Public Default ReadOnly Property Item(ByVal index As Integer) As tabelaIndicesCadastradosRow
                Get
                    Return CType(Me.Rows(index),tabelaIndicesCadastradosRow)
                End Get
            End Property
            
            Public Event tabelaIndicesCadastradosRowChanged As tabelaIndicesCadastradosRowChangeEventHandler
            
            Public Event tabelaIndicesCadastradosRowChanging As tabelaIndicesCadastradosRowChangeEventHandler
            
            Public Event tabelaIndicesCadastradosRowDeleted As tabelaIndicesCadastradosRowChangeEventHandler
            
            Public Event tabelaIndicesCadastradosRowDeleting As tabelaIndicesCadastradosRowChangeEventHandler
            
            Public Overloads Sub AddtabelaIndicesCadastradosRow(ByVal row As tabelaIndicesCadastradosRow)
                Me.Rows.Add(row)
            End Sub
            
            Public Overloads Function AddtabelaIndicesCadastradosRow(ByVal MESREF As Long) As tabelaIndicesCadastradosRow
                Dim rowtabelaIndicesCadastradosRow As tabelaIndicesCadastradosRow = CType(Me.NewRow,tabelaIndicesCadastradosRow)
                rowtabelaIndicesCadastradosRow.ItemArray = New Object() {MESREF}
                Me.Rows.Add(rowtabelaIndicesCadastradosRow)
                Return rowtabelaIndicesCadastradosRow
            End Function
            
            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            Public Overrides Function Clone() As DataTable
                Dim cln As tabelaIndicesCadastradosDataTable = CType(MyBase.Clone,tabelaIndicesCadastradosDataTable)
                cln.InitVars
                Return cln
            End Function
            
            Protected Overrides Function CreateInstance() As DataTable
                Return New tabelaIndicesCadastradosDataTable
            End Function
            
            Friend Sub InitVars()
                Me.columnMESREF = Me.Columns("MESREF")
            End Sub
            
            Private Sub InitClass()
                Me.columnMESREF = New DataColumn("MESREF", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnMESREF)
            End Sub
            
            Public Function NewtabelaIndicesCadastradosRow() As tabelaIndicesCadastradosRow
                Return CType(Me.NewRow,tabelaIndicesCadastradosRow)
            End Function
            
            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New tabelaIndicesCadastradosRow(builder)
            End Function
            
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(tabelaIndicesCadastradosRow)
            End Function
            
            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.tabelaIndicesCadastradosRowChangedEvent) Is Nothing) Then
                    RaiseEvent tabelaIndicesCadastradosRowChanged(Me, New tabelaIndicesCadastradosRowChangeEvent(CType(e.Row,tabelaIndicesCadastradosRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.tabelaIndicesCadastradosRowChangingEvent) Is Nothing) Then
                    RaiseEvent tabelaIndicesCadastradosRowChanging(Me, New tabelaIndicesCadastradosRowChangeEvent(CType(e.Row,tabelaIndicesCadastradosRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.tabelaIndicesCadastradosRowDeletedEvent) Is Nothing) Then
                    RaiseEvent tabelaIndicesCadastradosRowDeleted(Me, New tabelaIndicesCadastradosRowChangeEvent(CType(e.Row,tabelaIndicesCadastradosRow), e.Action))
                End If
            End Sub
            
            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.tabelaIndicesCadastradosRowDeletingEvent) Is Nothing) Then
                    RaiseEvent tabelaIndicesCadastradosRowDeleting(Me, New tabelaIndicesCadastradosRowChangeEvent(CType(e.Row,tabelaIndicesCadastradosRow), e.Action))
                End If
            End Sub
            
            Public Sub RemovetabelaIndicesCadastradosRow(ByVal row As tabelaIndicesCadastradosRow)
                Me.Rows.Remove(row)
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaIndicesCadastradosRow
            Inherits DataRow
            
            Private tabletabelaIndicesCadastrados As tabelaIndicesCadastradosDataTable
            
            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tabletabelaIndicesCadastrados = CType(Me.Table,tabelaIndicesCadastradosDataTable)
            End Sub
            
            Public Property MESREF As Long
                Get
                    Try 
                        Return CType(Me(Me.tabletabelaIndicesCadastrados.MESREFColumn),Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletabelaIndicesCadastrados.MESREFColumn) = value
                End Set
            End Property
            
            Public Function IsMESREFNull() As Boolean
                Return Me.IsNull(Me.tabletabelaIndicesCadastrados.MESREFColumn)
            End Function
            
            Public Sub SetMESREFNull()
                Me(Me.tabletabelaIndicesCadastrados.MESREFColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class tabelaIndicesCadastradosRowChangeEvent
            Inherits EventArgs
            
            Private eventRow As tabelaIndicesCadastradosRow
            
            Private eventAction As DataRowAction
            
            Public Sub New(ByVal row As tabelaIndicesCadastradosRow, ByVal action As DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            Public ReadOnly Property Row As tabelaIndicesCadastradosRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            Public ReadOnly Property Action As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
